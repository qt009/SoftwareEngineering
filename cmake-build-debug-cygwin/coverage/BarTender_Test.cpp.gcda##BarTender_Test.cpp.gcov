        -:    0:Source:/cygdrive/c/Users/PC/OneDrive - stud.h-da.de/PRAKTIKUM/Software Engineering/CocktailPro/src/test/BarTender_Test.cpp
        -:    0:Graph:/cygdrive/c/Users/PC/OneDrive - stud.h-da.de/PRAKTIKUM/Software Engineering/CocktailPro/cmake-build-debug-cygwin/CMakeFiles/CocktailProTest.dir/src/test/BarTender_Test.cpp.gcno
        -:    0:Data:/cygdrive/c/Users/PC/OneDrive - stud.h-da.de/PRAKTIKUM/Software Engineering/CocktailPro/cmake-build-debug-cygwin/CMakeFiles/CocktailProTest.dir/src/test/BarTender_Test.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <limits.h>
        -:    2:#include <string>
        -:    3:#include "gtest/gtest.h"
        -:    4:
        -:    5:// Using this ugly tweak you make all private elements public!
        -:    6:// But be careful! Some methods are private for good reasons!
        -:    7:// So please use this trick only if you really need it!
        -:    8:#define protected public
        -:    9:#define private public
        -:   10:#include "BarTender.h"
        -:   11:#undef protected
        -:   12:#undef private
        -:   13:
        -:   14:#include <sstream>
        -:   15:
        -:   16:class BarTenderTest: public ::testing::Test
        -:   17:{
        -:   18:protected:
        -:   19:    BarTender* bt;
        -:   20:    AvailableIngredients* ai ;
        -:   21:    DeviceVerwalter* dv;
        -:   22:    RecipeBook *testBook;
        -:   23:    Timer *myTimer;
        -:   24:
        -:   25:    std::basic_streambuf<char>* orig_cout;
        -:   26:    std::stringstream test_cout;
        -:   27:
function _ZN13BarTenderTest5SetUpEv called 3 returned 100% blocks executed 72%
        3:   28:    void SetUp() override
        -:   29:    {
        -:   30:        // Check whether cout works normal - otherwise you will get very strange errors
        -:   31:        // if someone else made a mistake when redirecting cout
        3:   32:        std::cout << "Start of " << "BarTenderTest" << std::endl << std::flush;
        3:   32-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
call    3 returned 3
        -:   33:
        -:   34:        // redirect cout to my test_cout stream for testing
        -:   35:        // and store orig cout for restoring after test (!!!do not forget to restore!!!)
        3:   36:        orig_cout = std::cout.rdbuf(test_cout.rdbuf());
call    0 returned 3
call    1 returned 3
        -:   37:
        3:   38:        ai = new AvailableIngredients();
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   38-block  0
call    4 never executed
        3:   39:        dv = new DeviceVerwalter(ai);
        3:   39-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   39-block  1
call    4 never executed
        3:   40:        bt = new BarTender(dv);
        3:   40-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   40-block  1
call    4 never executed
        3:   41:        testBook = new RecipeBook();
        3:   41-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   41-block  1
call    4 never executed
        3:   42:        myTimer = myTimer->getInstance();
        3:   42-block  0
call    0 returned 3
        3:   43:        myTimer->setTurbo(1000);
call    0 returned 3
        3:   44:    }
        -:   45:
function _ZN13BarTenderTest8TearDownEv called 3 returned 100% blocks executed 100%
        3:   46:    virtual void TearDown()
        -:   47:    {
        -:   48:        // Code here will be called immediately after each test
        -:   49:        // (right before the destructor).
        3:   50:        std::cout.rdbuf(orig_cout); // redirect cout back to standard cout
        3:   50-block  0
call    0 returned 3
        3:   51:        delete ai;
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:   51-block  0
call    2 returned 2
        3:   52:        ai = nullptr;
        -:   53:
        -:   54:
        3:   55:        delete dv;
        3:   55-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:   55-block  1
call    2 returned 2
        3:   56:        dv = nullptr;
        -:   57:
        3:   58:        delete bt;
        3:   58-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:   58-block  1
call    2 returned 3
        3:   59:        bt = nullptr;
        -:   60:
        -:   61:
        -:   62:        // Check whether cout works normal again - otherwise the next one using cout
        -:   63:        // will get very strange behavior
        3:   64:        std::cout << "End of " << "BarTenderTest" << std::endl << std::flush;
        3:   64-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
call    3 returned 3
        3:   65:    }
        -:   66:};
        -:   67:
        4:   68:TEST_F(BarTenderTest, testConstructor){
        1:   69:    delete ai;
        1:   70:    ai = nullptr;
        -:   71:
        1:   72:    delete dv;
        1:   73:    dv = nullptr;
        -:   74:
        1:   75:    delete bt;
        1:   76:    bt = nullptr;
        -:   77:
        1:   78:    AvailableIngredients* testAI = new AvailableIngredients();
        1:   79:    DeviceVerwalter* testDV = new DeviceVerwalter(testAI);
        1:   80:    bt = new BarTender(testDV);
        -:   81:
       1*:   82:    EXPECT_EQ(testDV, bt->myDeviceVerwalter);
        1:   83:}
------------------
_ZN34BarTenderTest_testConstructor_TestC1Ev:
function _ZN34BarTenderTest_testConstructor_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   68:TEST_F(BarTenderTest, testConstructor){
        1:   68-block  0
call    0 returned 1
------------------
_ZN34BarTenderTest_testConstructor_TestD0Ev:
function _ZN34BarTenderTest_testConstructor_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   68:TEST_F(BarTenderTest, testConstructor){
        1:   68-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN34BarTenderTest_testConstructor_TestD1Ev:
function _ZN34BarTenderTest_testConstructor_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   68:TEST_F(BarTenderTest, testConstructor){
        1:   68-block  0
call    0 returned 1
------------------
_ZN34BarTenderTest_testConstructor_Test8TestBodyEv:
function _ZN34BarTenderTest_testConstructor_Test8TestBodyEv called 1 returned 100% blocks executed 45%
        1:   68:TEST_F(BarTenderTest, testConstructor){
        1:   69:    delete ai;
        1:   69-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   69-block  1
call    2 returned 1
        1:   70:    ai = nullptr;
        -:   71:
        1:   72:    delete dv;
        1:   72-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   72-block  1
call    2 returned 1
        1:   73:    dv = nullptr;
        -:   74:
        1:   75:    delete bt;
        1:   75-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   75-block  1
call    2 returned 1
        1:   76:    bt = nullptr;
        -:   77:
        1:   78:    AvailableIngredients* testAI = new AvailableIngredients();
        1:   78-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   78-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:   78-block  2
call    6 never executed
        1:   79:    DeviceVerwalter* testDV = new DeviceVerwalter(testAI);
        1:   79-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   79-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:   79-block  2
call    6 never executed
        1:   80:    bt = new BarTender(testDV);
        1:   80-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   80-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:   80-block  2
call    6 never executed
        -:   81:
       1*:   82:    EXPECT_EQ(testDV, bt->myDeviceVerwalter);
        1:   82-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   82-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   82-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   82-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   82-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   82-block  5
call   16 never executed
call   17 never executed
        1:   82-block  6
call   18 returned 1
    $$$$$:   82-block  7
call   19 never executed
    $$$$$:   82-block  8
    $$$$$:   82-block  9
call   20 never executed
    $$$$$:   82-block 10
    $$$$$:   82-block 11
call   21 never executed
        1:   83:}
------------------
        -:   84:
        4:   85:TEST_F(BarTenderTest, test_CocktailZubereiten){
        9:   86:    for(int i = 0; i < testBook->getNumberOfRecipes(); ++i){
        8:   87:        Recipe* r = testBook->getRecipe(i);
        8:   88:        bool RecipeAvailable = true;
       44:   89:        for(int j{};j<r->getNoOfRecipeSteps() ;++j){
        -:   90:
       38:   91:            auto rcpStep = r->getRecipeStep(j);
        -:   92:
      320:   93:            for(auto zu = ai->zutaten->begin(); zu <= ai->zutaten->end(); ++zu){
      320:   94:                if(zu == ai->zutaten->end()) {
        2:   95:                    RecipeAvailable = false;
        2:   96:                    break;
        -:   97:                }
      318:   98:                if (rcpStep->getZutat() == *zu) break;
        -:   99:            }
       38:  100:            if(!RecipeAvailable) break;
        -:  101:        }
        8:  102:        if(!RecipeAvailable) continue;
       6*:  103:        EXPECT_TRUE(bt->cocktailZubereiten(r));
        -:  104:    }
        1:  105:}
------------------
_ZN42BarTenderTest_test_CocktailZubereiten_TestC1Ev:
function _ZN42BarTenderTest_test_CocktailZubereiten_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   85:TEST_F(BarTenderTest, test_CocktailZubereiten){
        1:   85-block  0
call    0 returned 1
------------------
_ZN42BarTenderTest_test_CocktailZubereiten_TestD0Ev:
function _ZN42BarTenderTest_test_CocktailZubereiten_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   85:TEST_F(BarTenderTest, test_CocktailZubereiten){
        1:   85-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN42BarTenderTest_test_CocktailZubereiten_TestD1Ev:
function _ZN42BarTenderTest_test_CocktailZubereiten_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   85:TEST_F(BarTenderTest, test_CocktailZubereiten){
        1:   85-block  0
call    0 returned 1
------------------
_ZN42BarTenderTest_test_CocktailZubereiten_Test8TestBodyEv:
function _ZN42BarTenderTest_test_CocktailZubereiten_Test8TestBodyEv called 1 returned 100% blocks executed 64%
        1:   85:TEST_F(BarTenderTest, test_CocktailZubereiten){
        9:   86:    for(int i = 0; i < testBook->getNumberOfRecipes(); ++i){
        1:   86-block  0
        8:   86-block  1
        9:   86-block  2
call    0 returned 9
branch  1 taken 8
branch  2 taken 1 (fallthrough)
        8:   87:        Recipe* r = testBook->getRecipe(i);
        8:   87-block  0
call    0 returned 8
        8:   88:        bool RecipeAvailable = true;
       44:   89:        for(int j{};j<r->getNoOfRecipeSteps() ;++j){
       36:   89-block  0
       44:   89-block  1
call    0 returned 44
branch  1 taken 38
branch  2 taken 6 (fallthrough)
        -:   90:
       38:   91:            auto rcpStep = r->getRecipeStep(j);
       38:   91-block  0
call    0 returned 38
        -:   92:
      320:   93:            for(auto zu = ai->zutaten->begin(); zu <= ai->zutaten->end(); ++zu){
call    0 returned 38
      282:   93-block  0
call    1 returned 282
      320:   93-block  1
call    2 returned 320
call    3 returned 320
branch  4 taken 320
branch  5 taken 0 (fallthrough)
      320:   94:                if(zu == ai->zutaten->end()) {
      320:   94-block  0
call    0 returned 320
call    1 returned 320
branch  2 taken 2 (fallthrough)
branch  3 taken 318
        2:   95:                    RecipeAvailable = false;
        2:   96:                    break;
        2:   96-block  0
        -:   97:                }
      318:   98:                if (rcpStep->getZutat() == *zu) break;
      318:   98-block  0
call    0 returned 318
call    1 returned 318
branch  2 taken 318 (fallthrough)
branch  3 taken 0 (throw)
      318:   98-block  1
call    4 returned 318
call    5 returned 318
branch  6 taken 36 (fallthrough)
branch  7 taken 282
       36:   98-block  2
        -:   99:            }
       38:  100:            if(!RecipeAvailable) break;
       38:  100-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 36
        2:  100-block  1
        -:  101:        }
        8:  102:        if(!RecipeAvailable) continue;
        8:  102-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 6
        2:  102-block  1
       6*:  103:        EXPECT_TRUE(bt->cocktailZubereiten(r));
        6:  103-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  103-block  1
call    3 returned 6
call    4 returned 6
branch  5 taken 0 (fallthrough)
branch  6 taken 6
    %%%%%:  103-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  103-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  103-block  4
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  103-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:  103-block  6
call   20 never executed
call   21 never executed
call   22 never executed
        6:  103-block  7
call   23 returned 6
    $$$$$:  103-block  8
call   24 never executed
    $$$$$:  103-block  9
    $$$$$:  103-block 10
call   25 never executed
    $$$$$:  103-block 11
    $$$$$:  103-block 12
call   26 never executed
    $$$$$:  103-block 13
    $$$$$:  103-block 14
call   27 never executed
        -:  104:    }
        1:  105:}
        1:  105-block  0
------------------
        -:  106:
        4:  107:TEST_F(BarTenderTest, test_checkIfInRecipeSteps){
        1:  108:    const std::string name1 = "Eis";
        1:  109:    const std::string name2 = "Zitronensaft";
        1:  110:    Recipe *rzpt = testBook->getRecipe(0);
        -:  111:
       1*:  112:    EXPECT_TRUE(bt->checkIfInRecipeSteps(name1, rzpt));
       1*:  113:    EXPECT_FALSE(bt->checkIfInRecipeSteps(name2, rzpt));
        1:  114:}
------------------
_ZN44BarTenderTest_test_checkIfInRecipeSteps_TestC1Ev:
function _ZN44BarTenderTest_test_checkIfInRecipeSteps_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  107:TEST_F(BarTenderTest, test_checkIfInRecipeSteps){
        1:  107-block  0
call    0 returned 1
------------------
_ZN44BarTenderTest_test_checkIfInRecipeSteps_TestD0Ev:
function _ZN44BarTenderTest_test_checkIfInRecipeSteps_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  107:TEST_F(BarTenderTest, test_checkIfInRecipeSteps){
        1:  107-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN44BarTenderTest_test_checkIfInRecipeSteps_TestD1Ev:
function _ZN44BarTenderTest_test_checkIfInRecipeSteps_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  107:TEST_F(BarTenderTest, test_checkIfInRecipeSteps){
        1:  107-block  0
call    0 returned 1
------------------
_ZN44BarTenderTest_test_checkIfInRecipeSteps_Test8TestBodyEv:
function _ZN44BarTenderTest_test_checkIfInRecipeSteps_Test8TestBodyEv called 1 returned 100% blocks executed 29%
        1:  107:TEST_F(BarTenderTest, test_checkIfInRecipeSteps){
        1:  108:    const std::string name1 = "Eis";
        1:  108-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:  108-block  1
        1:  109:    const std::string name2 = "Zitronensaft";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:  109-block  0
        1:  110:    Recipe *rzpt = testBook->getRecipe(0);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  111:
       1*:  112:    EXPECT_TRUE(bt->checkIfInRecipeSteps(name1, rzpt));
        1:  112-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  112-block  1
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  112-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  112-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  112-block  4
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  112-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:  112-block  6
call   20 never executed
call   21 never executed
call   22 never executed
        1:  112-block  7
call   23 returned 1
    $$$$$:  112-block  8
call   24 never executed
    $$$$$:  112-block  9
    $$$$$:  112-block 10
call   25 never executed
    $$$$$:  112-block 11
    $$$$$:  112-block 12
call   26 never executed
    $$$$$:  112-block 13
    $$$$$:  112-block 14
call   27 never executed
       1*:  113:    EXPECT_FALSE(bt->checkIfInRecipeSteps(name2, rzpt));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  113-block  0
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:  113-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  113-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  113-block  3
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  113-block  4
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:  113-block  5
call   20 never executed
call   21 never executed
call   22 never executed
        1:  113-block  6
call   23 returned 1
    $$$$$:  113-block  7
call   24 never executed
    $$$$$:  113-block  8
    $$$$$:  113-block  9
call   25 never executed
    $$$$$:  113-block 10
    $$$$$:  113-block 11
call   26 never executed
    $$$$$:  113-block 12
    $$$$$:  113-block 13
call   27 never executed
        1:  114:}
call    0 returned 1
call    1 returned 1
    $$$$$:  114-block  0
call    2 never executed
    $$$$$:  114-block  1
call    3 never executed
------------------
