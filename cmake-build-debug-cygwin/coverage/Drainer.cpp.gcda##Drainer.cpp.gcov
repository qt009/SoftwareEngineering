        -:    0:Source:/cygdrive/c/Users/PC/OneDrive - stud.h-da.de/PRAKTIKUM/Software Engineering/CocktailPro/src/main/Drainer.cpp
        -:    0:Graph:/cygdrive/c/Users/PC/OneDrive - stud.h-da.de/PRAKTIKUM/Software Engineering/CocktailPro/cmake-build-debug-cygwin/CMakeFiles/CocktailProSource.dir/src/main/Drainer.cpp.gcno
        -:    0:Data:/cygdrive/c/Users/PC/OneDrive - stud.h-da.de/PRAKTIKUM/Software Engineering/CocktailPro/cmake-build-debug-cygwin/CMakeFiles/CocktailProSource.dir/src/main/Drainer.cpp.gcda
        -:    0:Runs:1
        -:    1://@(#) Drainer.cpp
        -:    2:
        -:    3:
        -:    4:#include "Drainer.h"
        -:    5:
function _ZN7DrainerC2EfiP5Waage called 26 returned 100% blocks executed 100%
       26:    6:Drainer::Drainer(float g, int ze, Waage * wg) : InternalDevice() {
       26:    6-block  0
call    0 returned 26
call    1 returned 26
       26:    7:    this->grammProZeit = g;
       26:    8:    this->zeiteinheit = ze;
       26:    9:    this->myWaage = wg;
       26:   10:    this->myWaage->attach(this);
call    0 returned 26
       26:   11:}
        -:   12:
function _ZN7DrainerD2Ev called 2 returned 100% blocks executed 100%
        2:   13:Drainer::~Drainer(){
        -:   14:
        2:   15:}
        -:   16:
        -:   17://
        -:   18:
function _ZN7Drainer6updateEv called 1314 returned 100% blocks executed 100%
     1314:   19:void Drainer::update() {
     1314:   20:    if (!this->doinIt) return;
     1314:   20-block  0
branch  0 taken 1127 (fallthrough)
branch  1 taken 187
     1127:   20-block  1
      187:   21:    if (myWaage->getWeight() <= this->value)
      187:   21-block  0
call    0 returned 187
branch  1 taken 30 (fallthrough)
branch  2 taken 157
       30:   22:        doinIt = 0;
       30:   22-block  0
        -:   23:}
        -:   24:
        -:   25://drain the cocktail from the tank to the customer
function _ZN7Drainer4doItEf called 30 returned 100% blocks executed 100%
       30:   26:void Drainer::doIt(float m_value) {
       30:   27:    std::cout << "Ihr Cocktail hat ein Gesamtgewicht von " << myWaage->getWeight() << "g" << std::endl;
       30:   27-block  0
call    0 returned 30
call    1 returned 30
call    2 returned 30
call    3 returned 30
call    4 returned 30
       30:   28:    std::cout << "Entleervorgang wird begonnen..." << std::endl;
call    0 returned 30
call    1 returned 30
       30:   29:    this->value = m_value;
       30:   30:    doinIt = 1;
      217:   31:    while (doinIt) {
      217:   31-block  0
branch  0 taken 187
branch  1 taken 30 (fallthrough)
      187:   32:        myTimer->sleepInIntervals(zeiteinheit);
      187:   32-block  0
call    0 returned 187
      187:   33:        myWaage->changeWeight(-grammProZeit);
call    0 returned 187
        -:   34:    }
       30:   35:    std::cout << std::endl;
       30:   35-block  0
call    0 returned 30
       30:   36:    std::cout << "Entleervorgang wurde beendet, bitte entnehmen Sie ihren Cocktail!" << std::endl;
call    0 returned 30
call    1 returned 30
       30:   37:    std::cout << std::endl;
call    0 returned 30
       30:   38:    needsCleaning = true;
       30:   39:}
