        -:    0:Source:/cygdrive/c/Users/PC/OneDrive - stud.h-da.de/PRAKTIKUM/Software Engineering/CocktailPro/src/main/Dispenser.cpp
        -:    0:Graph:/cygdrive/c/Users/PC/OneDrive - stud.h-da.de/PRAKTIKUM/Software Engineering/CocktailPro/cmake-build-debug-cygwin/CMakeFiles/CocktailProSource.dir/src/main/Dispenser.cpp.gcno
        -:    0:Data:/cygdrive/c/Users/PC/OneDrive - stud.h-da.de/PRAKTIKUM/Software Engineering/CocktailPro/cmake-build-debug-cygwin/CMakeFiles/CocktailProSource.dir/src/main/Dispenser.cpp.gcda
        -:    0:Runs:1
        -:    1://@(#) Dispenser.cpp
        -:    2:
        -:    3:
        -:    4:#include "Dispenser.h"
        -:    5:
function _ZN9DispenserC2EfiRSsP5Waage called 387 returned 100% blocks executed 86%
      387:    6:Dispenser::Dispenser(float g, int ze, std::string& m_inhalt, Waage * wg) : InternalDevice(), inhalt(m_inhalt){
      387:    6-block  0
call    0 returned 387
call    1 returned 387
call    2 returned 387
      387:    7:    this->grammProZeit = g;
      387:    8:    this->zeiteinheit = ze;
        -:    9:
      387:   10:    this->myWaage = wg;
      387:   11:    this->myWaage->attach(this);
call    0 returned 387
branch  1 taken 387 (fallthrough)
branch  2 taken 0 (throw)
      387:   12:}
      387:   12-block  0
    $$$$$:   12-block  1
call    0 never executed
        -:   13:
function _ZN9Dispenser6updateEv called 20998 returned 100% blocks executed 100%
    20998:   14:void Dispenser::update() {
    20998:   15:    if (!this->doinIt) return;
    20998:   15-block  0
branch  0 taken 19867 (fallthrough)
branch  1 taken 1131
    19867:   15-block  1
     1131:   16:    if (myWaage->getDelta() >= gwicht) {
     1131:   16-block  0
call    0 returned 1131
branch  1 taken 126 (fallthrough)
branch  2 taken 1005
      126:   17:        doinIt = false;
      126:   17-block  0
        -:   18:    }
        -:   19:
        -:   20:}
        -:   21:
        -:   22://dispense the fluid in an amount measured by gramm
function _ZN9Dispenser4doItEf called 126 returned 100% blocks executed 100%
      126:   23:void Dispenser::doIt(float gramm) {
      126:   24:    this->gwicht = gramm;
      126:   25:    myWaage->tara();
      126:   25-block  0
call    0 returned 126
      126:   26:    doinIt = true;
      126:   27:    std::cout << inhalt << " Ventil wurde geoeffnet" << std::endl;
call    0 returned 126
call    1 returned 126
call    2 returned 126
     1257:   28:    while (doinIt) {
     1257:   28-block  0
branch  0 taken 1131
branch  1 taken 126 (fallthrough)
     1131:   29:        myTimer->sleepInIntervals(zeiteinheit);
     1131:   29-block  0
call    0 returned 1131
     1131:   30:        myWaage->changeWeight(grammProZeit);
call    0 returned 1131
        -:   31:        //myWaage->changeWeight(0);
        -:   32:    }
      126:   33:    std::cout << std::endl << inhalt << " Ventil wurde geschlossen" << std::endl;
      126:   33-block  0
call    0 returned 126
call    1 returned 126
call    2 returned 126
call    3 returned 126
      126:   34:    std::cout << "Es wurden " << myWaage->getDelta() << "g " << inhalt << " abgefuellt" << std::endl;
call    0 returned 126
call    1 returned 126
call    2 returned 126
call    3 returned 126
call    4 returned 126
call    5 returned 126
call    6 returned 126
      126:   35:    std::cout << std::endl;
call    0 returned 126
      126:   36:    needsCleaning = true;
      126:   37:}
        -:   38:
        -:   39://a measuring unit over a period of time
function _ZN9Dispenser16getStueckProZeitEv called 23 returned 100% blocks executed 100%
       23:   40:int Dispenser::getStueckProZeit() {
       23:   41:    return this->grammProZeit;
       23:   41-block  0
        -:   42:}
        -:   43:
        -:   44:
        -:   45:
        -:   46:
