        -:    0:Source:/cygdrive/c/Users/PC/OneDrive - stud.h-da.de/PRAKTIKUM/Software Engineering/CocktailPro/src/test/Drainer_Test.cpp
        -:    0:Graph:/cygdrive/c/Users/PC/OneDrive - stud.h-da.de/PRAKTIKUM/Software Engineering/CocktailPro/cmake-build-debug-cygwin/CMakeFiles/CocktailProTest.dir/src/test/Drainer_Test.cpp.gcno
        -:    0:Data:/cygdrive/c/Users/PC/OneDrive - stud.h-da.de/PRAKTIKUM/Software Engineering/CocktailPro/cmake-build-debug-cygwin/CMakeFiles/CocktailProTest.dir/src/test/Drainer_Test.cpp.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:#include <string>
        -:    3:#include "gtest/gtest.h"
        -:    4:
        -:    5:#define protected public
        -:    6:#define private public
        -:    7:#include "Drainer.h"
        -:    8:#undef protected
        -:    9:#undef private
        -:   10:
        -:   11:class DrainerTest: public::testing::Test{
        -:   12:protected:
        -:   13:    Drainer* myDrainer = nullptr;
        -:   14:    Waage* myWaage = new Waage();
        -:   15:    float grammProZeit = 10;
        -:   16:    int zeitEinheit = 5;
        -:   17:
function _ZN11DrainerTest5SetUpEv called 2 returned 100% blocks executed 86%
        2:   18:    void SetUp(){
        2:   19:        std::cout << "Start of Drainer Test" << std::endl;
        2:   19-block  0
call    0 returned 2
call    1 returned 2
        -:   20:
        2:   21:        myDrainer = new Drainer(grammProZeit, zeitEinheit, myWaage);
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   21-block  0
call    4 never executed
        2:   22:    }
        2:   22-block  0
        -:   23:
function _ZN11DrainerTest8TearDownEv called 2 returned 100% blocks executed 100%
        2:   24:    void TearDown(){
        2:   25:        delete myDrainer;
        2:   25-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   25-block  1
call    2 returned 2
call    3 returned 2
        2:   26:        myDrainer = nullptr;
        -:   27:
        2:   28:        delete myWaage;
        2:   28-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   28-block  1
call    2 returned 2
call    3 returned 2
        2:   29:        myWaage = nullptr;
        -:   30:
        2:   31:        std::cout << "End of DrainerTest" << std::endl;
        2:   31-block  0
call    0 returned 2
call    1 returned 2
        2:   32:    }
        -:   33:};
        4:   34:TEST_F(DrainerTest, update){
        1:   35:    myDrainer->update();
        1:   36:    if(myWaage->getWeight() <= myDrainer->value){
       1*:   37:        EXPECT_EQ(0, myDrainer->doinIt);
        -:   38:    }
        -:   39:    else{
    #####:   40:        EXPECT_EQ(1, myDrainer->doinIt);
        -:   41:    }
        1:   42:}
------------------
_ZN23DrainerTest_update_TestC1Ev:
function _ZN23DrainerTest_update_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   34:TEST_F(DrainerTest, update){
        1:   34-block  0
call    0 returned 1
------------------
_ZN23DrainerTest_update_TestD0Ev:
function _ZN23DrainerTest_update_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   34:TEST_F(DrainerTest, update){
        1:   34-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN23DrainerTest_update_TestD1Ev:
function _ZN23DrainerTest_update_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   34:TEST_F(DrainerTest, update){
        1:   34-block  0
call    0 returned 1
------------------
_ZN23DrainerTest_update_Test8TestBodyEv:
function _ZN23DrainerTest_update_Test8TestBodyEv called 1 returned 100% blocks executed 20%
        1:   34:TEST_F(DrainerTest, update){
        1:   35:    myDrainer->update();
        1:   35-block  0
call    0 returned 1
        1:   36:    if(myWaage->getWeight() <= myDrainer->value){
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
       1*:   37:        EXPECT_EQ(0, myDrainer->doinIt);
        1:   37-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   37-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   37-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   37-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   37-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   37-block  5
call   16 never executed
call   17 never executed
        1:   37-block  6
call   18 returned 1
    $$$$$:   37-block  7
    $$$$$:   37-block  8
call   19 never executed
    $$$$$:   37-block  9
    $$$$$:   37-block 10
call   20 never executed
    $$$$$:   37-block 11
    $$$$$:   37-block 12
call   21 never executed
        -:   38:    }
        -:   39:    else{
    #####:   40:        EXPECT_EQ(1, myDrainer->doinIt);
    %%%%%:   40-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   40-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   40-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   40-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   40-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   40-block  5
call   16 never executed
call   17 never executed
    %%%%%:   40-block  6
call   18 never executed
    $$$$$:   40-block  7
    $$$$$:   40-block  8
call   19 never executed
    $$$$$:   40-block  9
    $$$$$:   40-block 10
call   20 never executed
    $$$$$:   40-block 11
    $$$$$:   40-block 12
call   21 never executed
        -:   41:    }
        1:   42:}
        1:   42-block  0
------------------
        -:   43:
        4:   44:TEST_F(DrainerTest,doIt){
        1:   45:    float m_value = myDrainer->value;
        1:   46:    myDrainer->doIt(m_value);
       1*:   47:    EXPECT_EQ(myDrainer->doinIt,0);
       1*:   48:    EXPECT_EQ(myWaage->getWeight(),0);
        1:   49:}
------------------
_ZN21DrainerTest_doIt_TestC1Ev:
function _ZN21DrainerTest_doIt_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   44:TEST_F(DrainerTest,doIt){
        1:   44-block  0
call    0 returned 1
------------------
_ZN21DrainerTest_doIt_TestD0Ev:
function _ZN21DrainerTest_doIt_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   44:TEST_F(DrainerTest,doIt){
        1:   44-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN21DrainerTest_doIt_TestD1Ev:
function _ZN21DrainerTest_doIt_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   44:TEST_F(DrainerTest,doIt){
        1:   44-block  0
call    0 returned 1
------------------
_ZN21DrainerTest_doIt_Test8TestBodyEv:
function _ZN21DrainerTest_doIt_Test8TestBodyEv called 1 returned 100% blocks executed 24%
        1:   44:TEST_F(DrainerTest,doIt){
        1:   45:    float m_value = myDrainer->value;
        1:   46:    myDrainer->doIt(m_value);
        1:   46-block  0
call    0 returned 1
       1*:   47:    EXPECT_EQ(myDrainer->doinIt,0);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   47-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   47-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   47-block  2
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   47-block  3
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   47-block  4
call   16 never executed
call   17 never executed
        1:   47-block  5
call   18 returned 1
    $$$$$:   47-block  6
    $$$$$:   47-block  7
call   19 never executed
    $$$$$:   47-block  8
    $$$$$:   47-block  9
call   20 never executed
    $$$$$:   47-block 10
    $$$$$:   47-block 11
call   21 never executed
       1*:   48:    EXPECT_EQ(myWaage->getWeight(),0);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   48-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   48-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   48-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:   48-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   48-block  4
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:   48-block  5
call   19 never executed
call   20 never executed
        1:   48-block  6
call   21 returned 1
    $$$$$:   48-block  7
    $$$$$:   48-block  8
    $$$$$:   48-block  9
call   22 never executed
    $$$$$:   48-block 10
    $$$$$:   48-block 11
call   23 never executed
    $$$$$:   48-block 12
    $$$$$:   48-block 13
call   24 never executed
        1:   49:}
------------------
        -:   50:
        -:   51://TEST_F(DrainerTest, getIsDeviceActiveFlag){
        -:   52://    myDrainer->isDeviceActive = false;
        -:   53://
        -:   54://    EXPECT_FALSE(myDrainer->isUpdateNeeded());
        -:   55://}
        -:   56://
        -:   57://TEST_F(DrainerTest, checkUpdateNeededWorkingCorrect){
        -:   58://    myDrainer->myWaage->weight = 2;
        -:   59://    myDrainer->minimumWeightValue = 3;
        -:   60://
        -:   61://    EXPECT_FALSE(myDrainer->isUpdateNeeded());
        -:   62://}
        -:   63://
        -:   64://TEST_F(DrainerTest, checkConstructorValues){
        -:   65://    EXPECT_EQ(5, myDrainer->gramsPerTimeUnit);
        -:   66://    EXPECT_EQ(5, myDrainer->workingTimeUnit);
        -:   67://    EXPECT_EQ(myWaage, myDrainer->myWaage);
        -:   68://}
        -:   69://
        -:   70://TEST_F(DrainerTest, checkEmptyingActionWorkingCorrect){
        -:   71://    myDrainer->emptying();
        -:   72://
        -:   73://    EXPECT_TRUE(myDrainer->getIsClean());
        -:   74://    EXPECT_FALSE(myDrainer->isDeviceActive);
        -:   75://}
