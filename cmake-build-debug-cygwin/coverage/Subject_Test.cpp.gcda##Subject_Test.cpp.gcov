        -:    0:Source:/cygdrive/c/Users/PC/OneDrive - stud.h-da.de/PRAKTIKUM/Software Engineering/CocktailPro/src/test/Subject_Test.cpp
        -:    0:Graph:/cygdrive/c/Users/PC/OneDrive - stud.h-da.de/PRAKTIKUM/Software Engineering/CocktailPro/cmake-build-debug-cygwin/CMakeFiles/CocktailProTest.dir/src/test/Subject_Test.cpp.gcno
        -:    0:Data:/cygdrive/c/Users/PC/OneDrive - stud.h-da.de/PRAKTIKUM/Software Engineering/CocktailPro/cmake-build-debug-cygwin/CMakeFiles/CocktailProTest.dir/src/test/Subject_Test.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <limits.h>
        -:    2:#include "gtest/gtest.h"
        -:    3:
        -:    4:// Using this ugly tweak you make all private elements public!
        -:    5:// But be careful! Some methods are private for good reasons!
        -:    6:// So please use this trick only if you really need it!
        -:    7:#define protected public
        -:    8:#define private public
        -:    9:#include "Subject.h"
        -:   10:#include "Observer.h"
        -:   11:#undef protected
        -:   12:#undef private
        -:   13:
        -:   14:class SubjectTest : public ::testing::Test {
        -:   15:protected:
        -:   16:    Subject* r;
        -:   17:
function _ZN11SubjectTest5SetUpEv called 1 returned 100% blocks executed 100%
        1:   18:    virtual void SetUp() {
        1:   19:        r = new Subject();
        1:   19-block  0
call    0 returned 1
call    1 returned 1
        -:   20:        // you never know what the constructor is really doing
        -:   21:        // so make the list empty and fill it yourself!
        -:   22:
        1:   23:        r->observers.clear();
call    0 returned 1
        -:   24:
        -:   25:
        1:   26:    }
        -:   27:
function _ZN11SubjectTest8TearDownEv called 1 returned 100% blocks executed 100%
        1:   28:    virtual void TearDown() {
        -:   29:        // Code here will be called immediately after each test
        -:   30:        // (right before the destructor).
        1:   31:        delete r;
        1:   31-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   31-block  1
call    2 returned 1
call    3 returned 1
        1:   32:    }
        -:   33:};
        -:   34:
        4:   35:TEST_F(SubjectTest,testAttach){
        -:   36:    Observer*ob;
        1:   37:    r->attach(ob);
        1:   38:    int index=r->observers.size()-1;
        1:   39:    Observer*ob2=r->observers.at(index);
       1*:   40:    EXPECT_EQ(ob2,ob);
        1:   41:}
------------------
_ZN27SubjectTest_testAttach_TestC1Ev:
function _ZN27SubjectTest_testAttach_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   35:TEST_F(SubjectTest,testAttach){
        1:   35-block  0
call    0 returned 1
------------------
_ZN27SubjectTest_testAttach_TestD0Ev:
function _ZN27SubjectTest_testAttach_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   35:TEST_F(SubjectTest,testAttach){
        1:   35-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN27SubjectTest_testAttach_TestD1Ev:
function _ZN27SubjectTest_testAttach_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   35:TEST_F(SubjectTest,testAttach){
        1:   35-block  0
call    0 returned 1
------------------
_ZN27SubjectTest_testAttach_Test8TestBodyEv:
function _ZN27SubjectTest_testAttach_Test8TestBodyEv called 1 returned 100% blocks executed 36%
        1:   35:TEST_F(SubjectTest,testAttach){
        -:   36:    Observer*ob;
        1:   37:    r->attach(ob);
        1:   37-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   38:    int index=r->observers.size()-1;
        1:   38-block  0
call    0 returned 1
        1:   39:    Observer*ob2=r->observers.at(index);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   40:    EXPECT_EQ(ob2,ob);
        1:   40-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   40-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   40-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   40-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   40-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   40-block  5
call   16 never executed
call   17 never executed
        1:   40-block  6
call   18 returned 1
    $$$$$:   40-block  7
call   19 never executed
    $$$$$:   40-block  8
    $$$$$:   40-block  9
call   20 never executed
    $$$$$:   40-block 10
    $$$$$:   40-block 11
call   21 never executed
        1:   41:}
------------------
        -:   42:
        -:   43:
